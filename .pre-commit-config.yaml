# Pre-commit configuration for HWAutomation
# This file configures pre-commit hooks to automatically run code quality checks
# before each commit, ensuring consistent code standards.

repos:
  # Code formatting with black
  - repo: https://github.com/psf/black
    rev: 24.1.1
    hooks:
      - id: black
        name: Code formatting (black)
        description: Auto-format Python code with black
        language_version: python3
        args: [--line-length=88]

  # Import sorting with isort
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        name: Import sorting (isort)
        description: Sort Python imports
        args: [--profile=black, --line-length=88]

  # Code linting with flake8
  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        name: Code linting (flake8)
        description: Lint Python code for style and errors
        additional_dependencies: [flake8-docstrings, flake8-bugbear]

  # Type checking with mypy
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        name: Type checking (mypy)
        description: Static type checking for Python
        additional_dependencies: [types-requests, types-PyYAML]
        args: [--ignore-missing-imports, --follow-imports=silent]

  # Security scanning with bandit
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        name: Security scanning (bandit)
        description: Security-focused static analysis
        args: ['-c', 'pyproject.toml']
        exclude: ^tests/

  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # Check file formatting
      - id: trailing-whitespace
        name: Remove trailing whitespace
        description: Remove trailing whitespace from files
      - id: end-of-file-fixer
        name: Fix file endings
        description: Ensure files end with a newline
      - id: check-yaml
        name: Validate YAML syntax
        description: Check YAML files for syntax errors
      - id: check-json
        name: Validate JSON syntax
        description: Check JSON files for syntax errors
      - id: check-toml
        name: Validate TOML syntax
        description: Check TOML files for syntax errors
      - id: check-xml
        name: Validate XML syntax
        description: Check XML files for syntax errors
      
      # Check for common issues
      - id: check-added-large-files
        name: Check for large files
        description: Prevent committing large files
        args: ['--maxkb=1000']
      - id: check-case-conflict
        name: Check filename case conflicts
        description: Check for files with names that differ only in case
      - id: check-merge-conflict
        name: Check for merge conflicts
        description: Check for merge conflict markers
      - id: check-symlinks
        name: Check symbolic links
        description: Check for broken symbolic links
      - id: check-executables-have-shebangs
        name: Check executable shebangs
        description: Ensure executable files have shebangs
      - id: check-shebang-scripts-are-executable
        name: Check shebang executability
        description: Ensure shebang scripts are executable

      # Python-specific checks
      - id: check-ast
        name: Check Python AST
        description: Check Python files compile correctly
      - id: check-builtin-literals
        name: Check builtin literals
        description: Require literal syntax when initializing builtin types
      - id: check-docstring-first
        name: Check docstring placement
        description: Check that docstrings come first
      - id: debug-statements
        name: Check for debug statements
        description: Check for debugger imports and breakpoints
      - id: name-tests-test
        name: Check test naming
        description: Ensure test files are named correctly
        args: ['--pytest-test-first']

  # Documentation checks
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        name: Docstring style (pydocstyle)
        description: Check Python docstring style
        args: [--convention=numpy, --add-ignore=D100,D104,D105]

  # Spell checking for documentation
  - repo: https://github.com/crate-ci/typos
    rev: v1.16.23
    hooks:
      - id: typos
        name: Spell checking (typos)
        description: Check for common typos
        args: [--format=brief]
        types: [text]
        exclude: |
          (?x)^(
              .*\.lock$|
              .*\.min\.js$|
              .*\.min\.css$|
              .*/node_modules/.*|
              .*/\.git/.*|
              .*/__pycache__/.*
          )$

  # Jupyter notebook cleaning
  - repo: https://github.com/nbQA-dev/nbQA
    rev: 1.7.1
    hooks:
      - id: nbqa-black
        name: Format Jupyter notebooks (black)
        description: Auto-format Jupyter notebooks with black
      - id: nbqa-isort
        name: Sort imports in Jupyter notebooks (isort)
        description: Sort imports in Jupyter notebooks
        args: [--profile=black]

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        name: Shell script linting (shellcheck)
        description: Lint shell scripts for common errors

# Global pre-commit configuration
default_language_version:
  python: python3.9

# Global exclude patterns
exclude: |
  (?x)^(
      .*\.egg-info/.*|
      .*/__pycache__/.*|
      .*/\.pytest_cache/.*|
      .*/\.mypy_cache/.*|
      .*/\.coverage|
      .*\.pyc$|
      .*\.pyo$|
      .*/build/.*|
      .*/dist/.*|
      .*/\.tox/.*|
      .*/\.venv/.*|
      .*/venv/.*|
      .*/hwautomation-env/.*|
      examples/.*|
      .*\.db$|
      .*\.backup$|
      .*/static/.*\.min\..*|
      .*/node_modules/.*
  )$

# Performance settings
fail_fast: false  # Continue running all hooks even if one fails
minimum_pre_commit_version: '3.0.0'
