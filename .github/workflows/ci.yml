# GitHub Actions CI/CD Pipeline for HWAutomation
# This workflow runs on every push and pull request to ensure code quality
# and run comprehensive tests across multiple Python versions.

name: CI/CD Pipeline

# Trigger conditions
on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

# Environment variables
env:
  PYTHON_DEFAULT_VERSION: "3.9"
  COVERAGE_THRESHOLD: 10

# Job definitions
jobs:
  # Code quality checks
  quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better analysis
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Check code formatting with Black
      run: |
        black --check --diff src/ tests/
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff src/ tests/
    
    - name: Lint with flake8
      run: |
        flake8 src/ tests/
    
    - name: Type check with mypy
      run: |
        mypy src/
    
    - name: Security scan with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json

  # Unit tests
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run unit tests
      run: |
        pytest tests/ -m "unit" --cov=src/hwautomation --cov-report=xml --cov-report=term --junitxml=junit.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == env.PYTHON_DEFAULT_VERSION
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          junit.xml
          coverage.xml

  # Integration tests
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test-unit
    
    services:
      # Add any required services here (databases, etc.)
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_hwautomation
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Set up test database
      run: |
        # Create test database and run migrations if needed
        echo "Setting up test database..."
    
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_hwautomation
      run: |
        pytest tests/ -m "integration" --tb=short --maxfail=5
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          junit.xml

  # Performance tests
  test-performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test-unit
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run performance tests
      run: |
        pytest tests/ -m "performance" --tb=short
    
    - name: Generate performance report
      run: |
        python tools/quality/code_quality.py --coverage
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: |
          htmlcov/
          performance-report.json

  # Documentation checks
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install sphinx sphinx-rtd-theme
    
    - name: Check documentation build
      run: |
        # Build documentation if we have Sphinx docs
        if [ -f "docs/conf.py" ]; then
          sphinx-build -b html docs/ docs/_build/html -W
        else
          echo "No Sphinx documentation found, checking README and other docs"
          # Check that key documentation files exist
          test -f README.md
          test -f docs/README.md
        fi
    
    - name: Check docstring coverage
      run: |
        interrogate src/ --fail-under=80 || echo "Docstring coverage below threshold"

  # Security and dependency checks
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install safety
    
    - name: Check for known security vulnerabilities
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Run additional security checks
      run: |
        bandit -r src/ -f json -o bandit-detailed.json
      continue-on-error: true
    
    - name: Upload security artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-detailed.json

  # Build and package
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [quality, test-unit]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: package-artifacts
        path: dist/

  # Release deployment (only on tags)
  deploy:
    name: Deploy Release
    runs-on: ubuntu-latest
    needs: [quality, test-unit, test-integration, build]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    environment:
      name: production
      url: https://pypi.org/project/hwautomation/
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: package-artifacts
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

  # Notification and reporting
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [quality, test-unit, test-integration, build]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.quality.result == 'success' && needs.test-unit.result == 'success' && needs.test-integration.result == 'success' && needs.build.result == 'success' }}
      run: |
        echo "üéâ All checks passed successfully!"
    
    - name: Notify on failure
      if: ${{ needs.quality.result == 'failure' || needs.test-unit.result == 'failure' || needs.test-integration.result == 'failure' || needs.build.result == 'failure' }}
      run: |
        echo "‚ùå Some checks failed. Please review the results."
        exit 1

# Workflow configuration
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
