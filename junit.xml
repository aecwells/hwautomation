<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="4" failures="0" skipped="0" tests="4" time="1.887" timestamp="2025-08-09T17:30:26.424562-07:00" hostname="ethereal"><testcase classname="" name="tests.test_firmware_manager" time="0.000"><error message="collection failure">.venv/lib/python3.12/site-packages/_pytest/python.py:498: in importtestmodule
    mod = import_path(
.venv/lib/python3.12/site-packages/_pytest/pathlib.py:587: in import_path
    importlib.import_module(module_name)
/usr/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
&lt;frozen importlib._bootstrap&gt;:1387: in _gcd_import
    ???
&lt;frozen importlib._bootstrap&gt;:1360: in _find_and_load
    ???
&lt;frozen importlib._bootstrap&gt;:1331: in _find_and_load_unlocked
    ???
&lt;frozen importlib._bootstrap&gt;:935: in _load_unlocked
    ???
.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:177: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:357: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.12/ast.py:52: in parse
    return compile(source, filename, mode, flags,
E     File "/home/cwells/projects/hwautomation/tests/test_firmware_manager.py", line 27
E       )
E       ^
E   SyntaxError: unmatched ')'</error></testcase><testcase classname="" name="tests.test_firmware_web_interface" time="0.000"><error message="collection failure">tests/test_firmware_web_interface.py:27: in &lt;module&gt;
    from hwautomation.web.routes.firmware import (
        DbHelper   = &lt;class 'hwautomation.database.helper.DbHelper'&gt;
        FirmwareManager = &lt;class 'hwautomation.hardware.firmware.manager.FirmwareManager'&gt;
        MagicMock  = &lt;class 'unittest.mock.MagicMock'&gt;
        Mock       = &lt;class 'unittest.mock.Mock'&gt;
        Path       = &lt;class 'pathlib.Path'&gt;
        WorkflowManager = &lt;class 'hwautomation.orchestration.workflow_manager.WorkflowManager'&gt;
        __builtins__ = &lt;builtins&gt;
        __cached__ = '/home/cwells/projects/hwautomation/tests/__pycache__/test_firmware_web_interface.cpython-312.pyc'
        __doc__    = '\nUnit tests for firmware web interface components.\n'
        __file__   = '/home/cwells/projects/hwautomation/tests/test_firmware_web_interface.py'
        __loader__ = &lt;_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7fb481e66ae0&gt;
        __name__   = 'test_firmware_web_interface'
        __package__ = ''
        __spec__   = ModuleSpec(name='test_firmware_web_interface', loader=&lt;_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7fb481e66ae0&gt;, origin='/home/cwells/projects/hwautomation/tests/test_firmware_web_interface.py')
        datetime   = &lt;class 'datetime.datetime'&gt;
        json       = &lt;module 'json' from '/usr/lib/python3.12/json/__init__.py'&gt;
        patch      = &lt;function patch at 0x7fb4810a2340&gt;
        pytest     = &lt;module 'pytest' from '/home/cwells/projects/hwautomation/.venv/lib/python3.12/site-packages/pytest/__init__.py'&gt;
        pytestmark = [MarkDecorator(mark=Mark(name='web', args=(), kwargs={})), MarkDecorator(mark=Mark(name='integration', args=(), kwargs={}))]
        shutil     = &lt;module 'shutil' from '/usr/lib/python3.12/shutil.py'&gt;
        sys        = &lt;module 'sys' (built-in)&gt;
        tempfile   = &lt;module 'tempfile' from '/usr/lib/python3.12/tempfile.py'&gt;
        timedelta  = &lt;class 'datetime.timedelta'&gt;
src/hwautomation/web/__init__.py:7: in &lt;module&gt;
    from .app import create_app
        __builtins__ = &lt;builtins&gt;
        __cached__ = '/home/cwells/projects/hwautomation/src/hwautomation/web/__pycache__/__init__.cpython-312.pyc'
        __doc__    = '\nWeb module for HWAutomation.\n\nThis module contains the Flask web application and all web-related components.\n.'
        __file__   = '/home/cwells/projects/hwautomation/src/hwautomation/web/__init__.py'
        __loader__ = &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fb47f89bb90&gt;
        __name__   = 'hwautomation.web'
        __package__ = 'hwautomation.web'
        __path__   = ['/home/cwells/projects/hwautomation/src/hwautomation/web']
        __spec__   = ModuleSpec(name='hwautomation.web', loader=&lt;_frozen_importlib_external.SourceFileLoader object at 0x7fb47f89bb90&gt;, ori.../hwautomation/web/__init__.py', submodule_search_locations=['/home/cwells/projects/hwautomation/src/hwautomation/web'])
        core       = &lt;module 'hwautomation.web.core' from '/home/cwells/projects/hwautomation/src/hwautomation/web/core/__init__.py'&gt;
src/hwautomation/web/app.py:266: in &lt;module&gt;
    app, socketio = create_app()
                    ^^^^^^^^^^^^
        Flask      = &lt;class 'flask.app.Flask'&gt;
        Path       = &lt;class 'pathlib.Path'&gt;
        SocketIO   = &lt;class 'flask_socketio.SocketIO'&gt;
        __builtins__ = &lt;builtins&gt;
        __cached__ = '/home/cwells/projects/hwautomation/src/hwautomation/web/__pycache__/app.cpython-312.pyc'
        __doc__    = '\nFlask Web Application for HWAutomation - Refactored with Blueprints.\n\nClean modular web interface with organized ...ints.\nCore workflow: MaaS device discovery → Device type selection → Batch commissioning → IPMI/BIOS configuration.\n'
        __file__   = '/home/cwells/projects/hwautomation/src/hwautomation/web/app.py'
        __loader__ = &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fb47f89be00&gt;
        __name__   = 'hwautomation.web.app'
        __package__ = 'hwautomation.web'
        __spec__   = ModuleSpec(name='hwautomation.web.app', loader=&lt;_frozen_importlib_external.SourceFileLoader object at 0x7fb47f89be00&gt;, origin='/home/cwells/projects/hwautomation/src/hwautomation/web/app.py')
        create_app = &lt;function create_app at 0x7fb47f788680&gt;
        environment = 'development'
        get_logger = &lt;function get_logger at 0x7fb480e31620&gt;
        logger     = &lt;Logger hwautomation.web.app (DEBUG)&gt;
        logging    = &lt;module 'logging' from '/usr/lib/python3.12/logging/__init__.py'&gt;
        os         = &lt;module 'os' (frozen)&gt;
        set_correlation_id = &lt;function set_correlation_id at 0x7fb480e316c0&gt;
        setup_logging = &lt;function setup_logging at 0x7fb480e31580&gt;
        sys        = &lt;module 'sys' (built-in)&gt;
        threading  = &lt;module 'threading' from '/usr/lib/python3.12/threading.py'&gt;
        time       = &lt;module 'time' (built-in)&gt;
        uuid       = &lt;module 'uuid' from '/usr/lib/python3.12/uuid.py'&gt;
src/hwautomation/web/app.py:93: in create_app
    workflow_manager = WorkflowManager(config)
                       ^^^^^^^^^^^^^^^^^^^^^^^
        BiosConfigManager = &lt;class 'hwautomation.hardware.bios.manager.BiosConfigManager'&gt;
        DbHelper   = &lt;class 'hwautomation.database.helper.DbHelper'&gt;
        DeviceSelectionService = &lt;class 'hwautomation.orchestration.device_selection.DeviceSelectionService'&gt;
        ServerProvisioningWorkflow = &lt;class 'hwautomation.orchestration.server_provisioning.ServerProvisioningWorkflow'&gt;
        WorkflowManager = &lt;class 'hwautomation.orchestration.workflow_manager.WorkflowManager'&gt;
        after_request = &lt;function create_app.&lt;locals&gt;.after_request at 0x7fb47efac5e0&gt;
        app        = &lt;Flask 'hwautomation.web.app'&gt;
        before_request = &lt;function create_app.&lt;locals&gt;.before_request at 0x7fb47f3cb420&gt;
        config     = {'database': {'auto_migrate': True, 'backup_before_migration': True, 'host': 'db', 'name': 'hwautomation_dev', ...}, '...admin'}, 'logging': {'backup_count': 5, 'file': '/app/logs/hwautomation.log', 'level': 'INFO', 'max_size_mb': 10}, ...}
        create_maas_client = &lt;function create_maas_client at 0x7fb47f9240e0&gt;
        database_path = 'hw_automation.db'
        db_helper  = &lt;hwautomation.database.helper.DbHelper object at 0x7fb47f309d00&gt;
        init_assets = &lt;function init_assets at 0x7fb47f3c56c0&gt;
        load_config = &lt;function load_config at 0x7fb47f81aca0&gt;
        project_root = PosixPath('/home/cwells/projects/hwautomation')
        request    = &lt;LocalProxy unbound&gt;
        socketio   = &lt;flask_socketio.SocketIO object at 0x7fb47ef9d7c0&gt;
        src_path   = PosixPath('/home/cwells/projects/hwautomation/src')
src/hwautomation/orchestration/workflow_manager.py:155: in __init__
    self.bios_manager = BiosConfigManager(config.get("bios", {}).get("config_dir"))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        config     = {'database': {'auto_migrate': True, 'backup_before_migration': True, 'host': 'db', 'name': 'hwautomation_dev', ...}, '...admin'}, 'logging': {'backup_count': 5, 'file': '/app/logs/hwautomation.log', 'level': 'INFO', 'max_size_mb': 10}, ...}
        db_config  = {'auto_migrate': True, 'backup_before_migration': True, 'host': 'db', 'name': 'hwautomation_dev', ...}
        maas_config = {'admin_password': 'admin123', 'admin_username': 'admin', 'api_key': 'your-api-key-here', 'consumer_key': 'your-consumer-key-here', ...}
        self       = &lt;hwautomation.orchestration.workflow_manager.WorkflowManager object at 0x7fb47f6c17c0&gt;
src/hwautomation/hardware/bios/manager.py:51: in __init__
    self.config_loader = ConfigurationLoader(config_dir)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        __class__  = &lt;class 'hwautomation.hardware.bios.manager.BiosConfigManager'&gt;
        config_dir = None
        self       = &lt;hwautomation.hardware.bios.manager.BiosConfigManager object at 0x7fb47f315ac0&gt;
src/hwautomation/hardware/bios/config/loader.py:28: in __init__
    self.device_mappings_file = os.path.join(config_dir, "device_mappings.yaml")
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        __class__  = &lt;class 'hwautomation.hardware.bios.config.loader.ConfigurationLoader'&gt;
        config_dir = None
        self       = &lt;hwautomation.hardware.bios.config.loader.ConfigurationLoader object at 0x7fb47f315c40&gt;
&lt;frozen posixpath&gt;:76: in join
    ???
E   TypeError: expected str, bytes or os.PathLike object, not NoneType
        a          = None
        p          = ('device_mappings.yaml',)</error></testcase><testcase classname="" name="tests.test_phase2_decision_logic" time="0.000"><error message="collection failure">ImportError while importing test module '/home/cwells/projects/hwautomation/tests/test_phase2_decision_logic.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/test_phase2_decision_logic.py:15: in &lt;module&gt;
    from hwautomation.hardware.bios_config import BiosConfigManager
E   ModuleNotFoundError: No module named 'hwautomation.hardware.bios_config'</error></testcase><testcase classname="" name="tests.test_phase3_monitoring" time="0.000"><error message="collection failure">tests/test_phase3_monitoring.py:92: in &lt;module&gt;
    class TestProgressCallback(ProgressCallback):
                               ^^^^^^^^^^^^^^^^
E   NameError: name 'ProgressCallback' is not defined
        MockBiosConfigManager = &lt;class 'test_phase3_monitoring.MockBiosConfigManager'&gt;
        Path       = &lt;class 'pathlib.Path'&gt;
        __builtins__ = &lt;builtins&gt;
        __cached__ = '/home/cwells/projects/hwautomation/tests/__pycache__/test_phase3_monitoring.cpython-312.pyc'
        __doc__    = '\nPhase 3 Enhanced BIOS Configuration - Real-time Monitoring Test\n\nThis test demonstrates the Phase 3 real-time monitoring capabilities including\nWebSocket progress updates, error recovery, and comprehensive validation.\n'
        __file__   = '/home/cwells/projects/hwautomation/tests/test_phase3_monitoring.py'
        __loader__ = &lt;_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7fb481e66ae0&gt;
        __name__   = 'test_phase3_monitoring'
        __package__ = ''
        __spec__   = ModuleSpec(name='test_phase3_monitoring', loader=&lt;_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7fb481e66ae0&gt;, origin='/home/cwells/projects/hwautomation/tests/test_phase3_monitoring.py')
        asyncio    = &lt;module 'asyncio' from '/usr/lib/python3.12/asyncio/__init__.py'&gt;
        datetime   = &lt;class 'datetime.datetime'&gt;
        json       = &lt;module 'json' from '/usr/lib/python3.12/json/__init__.py'&gt;
        load_device_config = &lt;function load_device_config at 0x7fb47f8e8360&gt;
        logger     = &lt;Logger test_phase3_monitoring (INFO)&gt;
        logging    = &lt;module 'logging' from '/usr/lib/python3.12/logging/__init__.py'&gt;
        sys        = &lt;module 'sys' (built-in)&gt;
        yaml       = &lt;module 'yaml' from '/home/cwells/projects/hwautomation/.venv/lib/python3.12/site-packages/yaml/__init__.py'&gt;</error></testcase></testsuite></testsuites>